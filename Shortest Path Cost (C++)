#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

const int rows = 5, cols = 6;
int minRow, minLength;
string path[rows][cols] = {{"0"},{"1"},{"2"},{"3"},{"4"}};

// Calculates the cost of every square and fills in the cost matrix.
void calculateCosts() {
   static int weights[rows][cols] = {{3,4,1,2,8,6},
                                    {6,1,8,2,7,4},
                                    {5,9,3,9,9,5},
                                    {8,4,1,3,2,6},
                                    {3,7,2,8,6,4}};
   // Declare the cost matrix.
   int cost[rows][cols] = {{3},
   								  {6},
								  {5},
								  {8},
								  {3}};
   // Copy the leftmost column of the weight matrix to the cost matrix, and initialize the leftmost column of the path matrix.
   // For each remaining column,
      // Calculate the cost of each square in the column (non-recursively),
      // and store the correct number in the cost matrix and the correct string in the path matrix.
   for(int j = 1; j < cols; j++){
   		for(int i = 0; i < rows; i++){
					if (cost[(i+rows - 1) % 5][j-1] + weights[i][j] < cost[i][j-1] + weights[i][j] && cost[(i+rows - 1) % 5][j-1] < cost[(i+1) % rows][j-1] + weights[i][j]){
					cost[i][j] = cost[(i+rows-1) % 5][j-1] + weights[i][j];
					path[i][j] = path[(i+rows-1) % 5][j-1] + to_string(i);
				}
				else if(cost[i][j-1] + weights[i][j] < cost[(i+rows - 1) % 5][j-1] + weights[i][j] && cost[i][j-1] < cost[(i+1) % rows][j-1] + weights[i][j]){
					cost[i][j] = cost[i][j-1] + weights[i][j];
					path[i][j] = path[i][j-1] + to_string(i);
				}
				else{
					cost[i][j] = cost[(i+1) % rows][j-1] + weights[i][j];
					path[i][j] = path[(i+1) % rows][j-1] + to_string(i);
				}
			}
			
		
		  }
// Check which square in the rightmost column has the lowest cost.  Store that cost in minLength and the row number in minRow.
   int lowest = cost[0][5]; //temporary assumption
   minRow = 0;
   for(int i=1; i < rows; i++){
   		if(cost[i][5] < lowest){
   			lowest = cost[i][5];
   			minRow = i;
   		  }
   }
	minLength = lowest;
}

int main() {
   calculateCosts();
   cout << "The length of the shortest path is " << minLength;
   cout << ".\nThe rows of the path from left to right are " << path[minRow][cols-1] << ".";

   return 0;
}
